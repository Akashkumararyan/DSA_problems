Print Like A Wave

Sample Input 1:
2
3 4
1 2 3 4
5 6 7 8
9 10 11 12
4 4
1 2 4 5
3 6 8 10
11 12 13 15
16 14 9 7
Sample Output 1:
1 5 9 10 6 2 3 7 11 12 8 4
1 3 11 16 14 12 6 2 4 8 13 9 7 15 10 5 


#include <bits/stdc++.h> 
vector<int> wavePrint(vector<vector<int>> arr, int nRows, int mCols)
{
    //Write your code here
    vector<int> ans;
    for(int i=0;i<mCols;i++){
        if(i&1){
          for(int row=nRows-1;row>=0;row--){
              ans.push_back(arr[row][i]);
          }
        }
        else{
           for(int row=0;row<nRows;row++){
               ans.push_back(arr[row][i]);
           }
        }
    }
    return ans;
}


54. Spiral Matrix

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;

        int row=matrix.size();
        int col=matrix[0].size();
        int total=row*col;
        int count=0;

        int sRow=0;
        int sCol=0;
        int eRow=row-1;
        int eCol=col-1;

        while(count<total){
            // starting row
            for(int i=sCol;count<total && i<=eCol;i++){
                ans.push_back(matrix[sRow][i]);
                count++;
            }
            sRow++;
              // Ending column
            for(int i=sRow;count<total && i<=eRow;i++){
                ans.push_back(matrix[i][eCol]);
                count++;
            }
            eCol--;
            // Ending row
            for(int i=eCol;count<total && i>=sCol;i--){
                ans.push_back(matrix[eRow][i]);
                count++;
            }
            eRow--;

            for(int i=eRow;count<total && i>=sRow;i--){
                ans.push_back(matrix[i][sCol]);
                count++;
            }
            sCol++;
        }
        return ans;
    }
};


74. Search a 2D Matrix

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();

        int s=0;
        int e=row*col-1;
        int mid=s+(e-s)/2;

        while(s<=e){
             
            int key=matrix[mid/col][mid%col];

            if(key==target)
              return 1;
            else if(key<target)
               s=mid+1;
            else{
              e=mid-1;
            }
            mid=s+(e-s)/2;
        }
        return 0;
    }
};


240. Search a 2D Matrix II

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int rowI=0;
        int colI=col-1;

        while(rowI<row && colI>=0){
          int key=matrix[rowI][colI];
          if(key==target) return 1;
          else if(key<target) rowI++;
          else colI--;
        }
        return 0;
    }
};
