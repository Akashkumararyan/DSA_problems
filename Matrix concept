Print Like A Wave

Sample Input 1:
2
3 4
1 2 3 4
5 6 7 8
9 10 11 12
4 4
1 2 4 5
3 6 8 10
11 12 13 15
16 14 9 7
Sample Output 1:
1 5 9 10 6 2 3 7 11 12 8 4
1 3 11 16 14 12 6 2 4 8 13 9 7 15 10 5 


#include <bits/stdc++.h> 
vector<int> wavePrint(vector<vector<int>> arr, int nRows, int mCols)
{
    //Write your code here
    vector<int> ans;
    for(int i=0;i<mCols;i++){
        if(i&1){
          for(int row=nRows-1;row>=0;row--){
              ans.push_back(arr[row][i]);
          }
        }
        else{
           for(int row=0;row<nRows;row++){
               ans.push_back(arr[row][i]);
           }
        }
    }
    return ans;
}


54. Spiral Matrix

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;

        int row=matrix.size();
        int col=matrix[0].size();
        int total=row*col;
        int count=0;

        int sRow=0;
        int sCol=0;
        int eRow=row-1;
        int eCol=col-1;

        while(count<total){
            // starting row
            for(int i=sCol;count<total && i<=eCol;i++){
                ans.push_back(matrix[sRow][i]);
                count++;
            }
            sRow++;
              // Ending column
            for(int i=sRow;count<total && i<=eRow;i++){
                ans.push_back(matrix[i][eCol]);
                count++;
            }
            eCol--;
            // Ending row
            for(int i=eCol;count<total && i>=sCol;i--){
                ans.push_back(matrix[eRow][i]);
                count++;
            }
            eRow--;

            for(int i=eRow;count<total && i>=sRow;i--){
                ans.push_back(matrix[i][sCol]);
                count++;
            }
            sCol++;
        }
        return ans;
    }
};


74. Search a 2D Matrix

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();

        int s=0;
        int e=row*col-1;
        int mid=s+(e-s)/2;

        while(s<=e){
             
            int key=matrix[mid/col][mid%col];

            if(key==target)
              return 1;
            else if(key<target)
               s=mid+1;
            else{
              e=mid-1;
            }
            mid=s+(e-s)/2;
        }
        return 0;
    }
};


240. Search a 2D Matrix II

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        int rowI=0;
        int colI=col-1;

        while(rowI<row && colI>=0){
          int key=matrix[rowI][colI];
          if(key==target) return 1;
          else if(key<target) rowI++;
          else colI--;
        }
        return 0;
    }
};


1337. The K Weakest Rows in a Matrix

Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].

vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
      int row=mat.size();
      int col=mat[0].size();
      vector<int> v;
      set<pair<int,int>> s;
      for(int i=0;i<row;i++){
          int cnt=count(mat[i].begin(),mat[i].end(),1);
          s.insert({cnt,i});
      }
      for(auto it:s){
          if(k==0)
          break;
          v.push_back(it.second);
          --k;
      }
      return v;  
    }
};

1380. Lucky Numbers in a Matrix

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

 vector<int> luckyNumbers (vector<vector<int>>& matrix) {
     int m=matrix.size();
     int n=matrix[0].size();
     int max_n=INT_MIN;
     for(int i=0;i<m;i++){
     int min_n=INT_MAX;
         for(int j=0;j<n;++j)
             min_n=min(min_n,matrix[i][j]);
             max_n=max(min_n,max_n);
     }
     int min_n=INT_MAX;
     for(int j=0;j<n;++j){
         int max_n=INT_MIN;
         for(int i=0;i<m;i++)
             max_n=max(max_n,matrix[i][j]);
             min_n=min(max_n,min_n);
     }
        if(min_n!=max_n) return vector<int> { };
        return vector<int>{min_n};
    }
    
    867. Transpose Matrix
    
    Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]

vector<vector<int>> transpose(vector<vector<int>>& matrix) {
        
        int row=matrix.size();
        int col=matrix[0].size();
        vector<vector<int>> ans(col,vector<int> (row,0));

        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                ans[j][i]=matrix[i][j];
            }
        }
        return ans;
    }
};


766. Toeplitz Matrix

Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
"[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]".
In each diagonal all elements are the same, so the answer is True.


 bool isToeplitzMatrix(vector<vector<int>>& matrix) {
        int row=matrix.size();
        int col=matrix[0].size();

        for(int i=1;i<row;i++){
            for(int j=1;j<col;j++){
                if(matrix[i][j] != matrix[i-1][j-1])
                  return false;
            }
        }
        return true;
    }
};

2319. Check if Matrix Is X-Matrix

Input: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
Output: true
Explanation: Refer to the diagram above. 
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is an X-Matrix.

bool checkXMatrix(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        cout<<row<<" "<<col<<" "<<endl;

        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(i==j || i+j==(col-1)){
                   if(grid[i][j] == 0) return false;
                }
                 else if(grid[i][j] != 0) return false;
                
            }
        }
        return true;
    }
};

59. Spiral Matrix II

Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]


 vector<vector<int>> ans(n, vector<int> (n, 1));
        int left = 0, right = n-1, top = 0, down = n-1, index = 1;
        
        while (left <= right && top <= down) {
            //first row
            for (int j = left; j <= right; j++) {
                ans[top][j] = index;
                index++;
            }
                
            top++;
            
            //last col
            for (int i = top; i <= down; i++) {
                ans[i][right] = index;
                index++;
            }
            
            right--;
            
            //last row
            for (int j = right; j >= left; j--) {
                ans[down][j] = index;
                index++;
            }
            
            down--;
            
            //first col
            for (int i = down; i >= top; i--) {
                ans[i][left] = index;
                index++;
            }
            
            left++;
        }
        return ans;
        
        
        
        1329. Sort the Matrix Diagonally
        
        Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]
Example 2:

Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]


 vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
       
       for(int i=0;i<n;i++){
           int k=i;
           int j=0;
           vector<int> v;
           while(k<n && j<m){
               v.push_back(mat[k][j]);
               k++;
               j++;
           }
           sort(v.begin(),v.end());
           k=i;
           j=0;
           int l=0;
           while(k<n && j<m && l<v.size()){
               mat[k][j]=v[l];
               k++;
               j++;
               l++;
           }
       }


       for(int j=1;j<m;j++){
           int k=j;
           int i=0;
           vector<int> v;
           while(k<m && i<n){
               v.push_back(mat[i][k]);
               k++;
               i++;
           }
           sort(v.begin(),v.end());
           k=j;
           i=0;
           int l=0;
           while(k<m && i<n && l<v.size()){
               mat[i][k]=v[l];
               k++;
               i++;
               l++;
           }
       }
        return mat;
    }
};


2545. Sort the Students by Their Kth Score

Input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2
Output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]
Explanation: In the above diagram, S denotes the student, while E denotes the exam.
- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.
- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.
- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place.


 vector<vector<int>> sortTheStudents(vector<vector<int>>& score, int k) {
        priority_queue<pair<int,int>> pq;
        for(int i=0;i<score.size();i++){
            pq.push({score[i][k],i});
        }
        vector<vector<int>> ans;
        while(!pq.empty()){
            auto x=pq.top();
            pq.pop();

            ans.push_back(score[x.second]);
        }
        return ans;
    }
};



1267. Count Servers that Communicate

Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.

Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.

int countServers(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<int> row(n),col(m);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1) row[i]++,col[j]++;
            }
        }
        int ans=0;
         for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && (row[i]>=2 ||col[j]>=2)) ans++;
            }
        }

        
        return ans;
    }
};


